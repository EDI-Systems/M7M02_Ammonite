<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Virt1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Virt1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Tue Oct 25 14:42:35 2022
<BR><P>
<H3>Maximum Stack Usage =         72 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RMP_Init &rArr; RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5]">_RVM_Jmp_Stub</a>
 <LI><a href="#[6]">RVM_Entry</a>
 <LI><a href="#[2b]">RMP_MSB_Get</a>
 <LI><a href="#[2f]">_RMP_Start</a>
 <LI><a href="#[3a]">RVM_Inv_Act</a>
 <LI><a href="#[3b]">RVM_Inv_Ret</a>
 <LI><a href="#[3c]">RVM_Thd_Sched_Rcv</a>
 <LI><a href="#[20]">RVM_Svc</a>
 <LI><a href="#[3d]">RVM_A7M_Svc_Kern</a>
 <LI><a href="#[24]">_RVM_MSB_Get</a>
 <LI><a href="#[25]">RVM_Fetch_And</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1]">Func_1</a> from rmp_blank.o(.text.Func_1) referenced 2 times from rmp_blank.o(.text.RMP_Init_Hook)
 <LI><a href="#[4]">RMP_Init</a> from rmp_kernel.o(.text.RMP_Init) referenced 2 times from rmp_kernel.o(.text.main)
 <LI><a href="#[3]">RMP_PendSV_Handler</a> from rmp_platform_a7m_rvm.o(.text.RMP_PendSV_Handler) referenced 2 times from rmp_platform_a7m_rvm.o(.text._RMP_Low_Level_Init)
 <LI><a href="#[2]">RMP_SysTick_Handler</a> from rmp_platform_a7m_rvm.o(.text.RMP_SysTick_Handler) referenced 2 times from rmp_platform_a7m_rvm.o(.text._RMP_Low_Level_Init)
 <LI><a href="#[0]">main</a> from rmp_kernel.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5]"></a>_RVM_Jmp_Stub</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_proc_asm.o(ARCH), UNUSED, KEPT)

<P><STRONG><a name="[6]"></a>RVM_Entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_proc_asm.o(ARCH), UNUSED, KEPT)

<P><STRONG><a name="[7]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))

<P><STRONG><a name="[30]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[8]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[32]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[33]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[34]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[35]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[36]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>

<P><STRONG><a name="[27]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Init
</UL>

<P><STRONG><a name="[38]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[39]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>Func_1</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rmp_blank.o(.text.Func_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = Func_1 &rArr; RMP_Thd_Delay &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_blank.o(.text.RMP_Init_Hook)
</UL>
<P><STRONG><a name="[f]"></a>RMP_Clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rmp_kernel.o(.text.RMP_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RMP_Clear
</UL>
<BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[4]"></a>RMP_Init</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, rmp_kernel.o(.text.RMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RMP_Init &rArr; RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unmask_Int
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_kernel.o(.text.main)
</UL>
<P><STRONG><a name="[12]"></a>RMP_Init_Hook</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, rmp_blank.o(.text.RMP_Init_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RMP_Init_Hook &rArr; RMP_Thd_Crt &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[15]"></a>RMP_Init_Idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_blank.o(.text.RMP_Init_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_Init_Idle &rArr; RVM_Hyp_Wait_Vect &rArr; RVM_Hyp
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Wait_Vect
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1b]"></a>RMP_Load_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(.text.RMP_Load_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[10]"></a>RMP_Mask_Int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text.RMP_Mask_Int))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[19]"></a>RMP_Save_Ctx</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rmp_kernel.o(.text.RMP_Save_Ctx))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[16]"></a>RMP_Thd_Crt</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, rmp_kernel.o(.text.RMP_Thd_Crt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Crt &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Stack_Init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unmask_Int
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Hook
</UL>

<P><STRONG><a name="[e]"></a>RMP_Thd_Delay</STRONG> (Thumb, 354 bytes, Stack size 24 bytes, rmp_kernel.o(.text.RMP_Thd_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = RMP_Thd_Delay &rArr; RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unmask_Int
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Func_1
</UL>

<P><STRONG><a name="[14]"></a>RMP_Unmask_Int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text.RMP_Unmask_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RMP_Unmask_Int &rArr; RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Unmask_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[1f]"></a>RVM_Hyp</STRONG> (Thumb, 478 bytes, Stack size 16 bytes, rvm_guest.o(.text.RVM_Hyp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RVM_Hyp
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Wait_Vect
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Ena_Int
</UL>

<P><STRONG><a name="[22]"></a>RVM_Hyp_Ena_Int</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rvm_guest.o(.text.RVM_Hyp_Ena_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RVM_Hyp_Ena_Int &rArr; RVM_Hyp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Plat_Hook
</UL>

<P><STRONG><a name="[17]"></a>RVM_Hyp_Wait_Vect</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rvm_guest.o(.text.RVM_Hyp_Wait_Vect))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RVM_Hyp_Wait_Vect &rArr; RVM_Hyp
</UL>
<BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init_Idle
</UL>

<P><STRONG><a name="[21]"></a>RVM_Putchar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, proc_virt1.o(.text.RVM_Putchar))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vect_Loop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Unmask_Int
</UL>

<P><STRONG><a name="[23]"></a>RVM_Vect_Loop</STRONG> (Thumb, 702 bytes, Stack size 0 bytes, rvm_guest.o(.text.RVM_Vect_Loop), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Fetch_And
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RVM_MSB_Get
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vect
</UL>

<P><STRONG><a name="[26]"></a>RVM_Virt_Init</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rvm_guest.o(.text.RVM_Virt_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_Vect
</UL>

<P><STRONG><a name="[18]"></a>RVM_Virt_Mask_Int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rvm_guest.o(.text.RVM_Virt_Mask_Int))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Mask_Int
</UL>

<P><STRONG><a name="[2e]"></a>RVM_Virt_Reg_Ctxsw</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rvm_guest.o(.text.RVM_Virt_Reg_Ctxsw))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[2d]"></a>RVM_Virt_Reg_Timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rvm_guest.o(.text.RVM_Virt_Reg_Timer))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>

<P><STRONG><a name="[1e]"></a>RVM_Virt_Unmask_Int</STRONG> (Thumb, 432 bytes, Stack size 16 bytes, rvm_guest.o(.text.RVM_Virt_Unmask_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RVM_Virt_Unmask_Int
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Unmask_Int
</UL>

<P><STRONG><a name="[28]"></a>RVM_Virt_Yield</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, rvm_guest.o(.text.RVM_Virt_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RVM_Virt_Yield
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Svc
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Yield
</UL>

<P><STRONG><a name="[29]"></a>Thd_User</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, proc_virt1.o(.text.Thd_User), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_User
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Thd_User
</UL>

<P><STRONG><a name="[2a]"></a>Thd_Vect</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, proc_virt1.o(.text.Thd_Vect), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vect_Loop
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Init
</UL>

<P><STRONG><a name="[1a]"></a>_RMP_Get_High_Rdy</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, rmp_kernel.o(.text._RMP_Get_High_Rdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_MSB_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_PendSV_Handler
</UL>

<P><STRONG><a name="[2c]"></a>_RMP_Low_Level_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Low_Level_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _RMP_Low_Level_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Reg_Ctxsw
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Reg_Timer
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11]"></a>_RMP_Plat_Hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Plat_Hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _RMP_Plat_Hook &rArr; RVM_Hyp_Ena_Int &rArr; RVM_Hyp
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp_Ena_Int
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
</UL>

<P><STRONG><a name="[1d]"></a>_RMP_Stack_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Stack_Init))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[1c]"></a>_RMP_Tick_Handler</STRONG> (Thumb, 296 bytes, Stack size 36 bytes, rmp_kernel.o(.text._RMP_Tick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _RMP_Tick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_SysTick_Handler
</UL>

<P><STRONG><a name="[13]"></a>_RMP_Yield</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text._RMP_Yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _RMP_Yield &rArr; RVM_Virt_Yield
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Init
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Delay
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Thd_Crt
</UL>

<P><STRONG><a name="[0]"></a>main</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, rmp_kernel.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = main &rArr; _RMP_Low_Level_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Start
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Low_Level_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2b]"></a>RMP_MSB_Get</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_a7m_rvm_asm.o(INIT))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>

<P><STRONG><a name="[2f]"></a>_RMP_Start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rmp_platform_a7m_rvm_asm.o(INIT))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a]"></a>RVM_Inv_Act</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)

<P><STRONG><a name="[3b]"></a>RVM_Inv_Ret</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)

<P><STRONG><a name="[3c]"></a>RVM_Thd_Sched_Rcv</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)

<P><STRONG><a name="[20]"></a>RVM_Svc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vect_Loop
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Hyp
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Yield
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Virt_Unmask_Int
</UL>

<P><STRONG><a name="[3d]"></a>RVM_A7M_Svc_Kern</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)

<P><STRONG><a name="[24]"></a>_RVM_MSB_Get</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vect_Loop
</UL>

<P><STRONG><a name="[25]"></a>RVM_Fetch_And</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rvm_guest_a7m_asm.o(RESET), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RVM_Vect_Loop
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[40]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2]"></a>RMP_SysTick_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rmp_platform_a7m_rvm.o(.text.RMP_SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RMP_SysTick_Handler &rArr; _RMP_Tick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Tick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_platform_a7m_rvm.o(.text._RMP_Low_Level_Init)
</UL>
<P><STRONG><a name="[3]"></a>RMP_PendSV_Handler</STRONG> (Thumb, 422 bytes, Stack size 16 bytes, rmp_platform_a7m_rvm.o(.text.RMP_PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = RMP_PendSV_Handler &rArr; _RMP_Get_High_Rdy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Load_Ctx
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RMP_Save_Ctx
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_RMP_Get_High_Rdy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rmp_platform_a7m_rvm.o(.text._RMP_Low_Level_Init)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
