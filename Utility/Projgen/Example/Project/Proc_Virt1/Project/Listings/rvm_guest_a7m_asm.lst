


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : rvm_guest_a7m_asm.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 09/02/2018
    5 00000000         ;Description : The assembly portion of the RVM guest lib
                       rary for ARMv7-M.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* Begin Header ***************************************
                       **********************/
    9 00000000         ;Stack for initializing process only
   10 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   11 00000000         RVM_User_Stack
   12 00000000         User_Stack
                               SPACE            0x00000400
   13 00000400         __initial_sp
   14 00000400         
   15 00000400         RVM_Int_Stack
   16 00000400         Int_Stack
                               SPACE            0x00000400
   17 00000800         
   18 00000800         ;The align is "(2^3)/8=1(Byte)." In fact it does not tak
                       e effect.            
   19 00000800                 AREA             RESET,CODE,READONLY,ALIGN=3
   20 00000000         
   21 00000000                 THUMB
   22 00000000                 REQUIRE8
   23 00000000                 PRESERVE8
   24 00000000         ;/* End Header *****************************************
                       **********************/
   25 00000000         
   26 00000000         ;/* Begin Exports **************************************
                       **********************/
   27 00000000         ;The initial stack pointer position
   28 00000000                 EXPORT           __initial_sp
   29 00000000         ;The user stack pointer position
   30 00000000                 EXPORT           RVM_User_Stack
   31 00000000         ;The interrupt stack pointer position
   32 00000000                 EXPORT           RVM_Int_Stack
   33 00000000         ;Triggering an invocation
   34 00000000                 EXPORT           RVM_Inv_Act
   35 00000000         ;Returning from an invocation
   36 00000000                 EXPORT           RVM_Inv_Ret
   37 00000000         ;Receive thread scheduler notification
   38 00000000                 EXPORT           RVM_Thd_Sched_Rcv
   39 00000000         ;System call gate
   40 00000000                 EXPORT           RVM_Svc
   41 00000000         ;Kernel function system call gate
   42 00000000                 EXPORT           RVM_A7M_Svc_Kern
   43 00000000         ;Get the MSB in the word
   44 00000000                 EXPORT           _RVM_MSB_Get
   45 00000000         ;The atomic AND operation
   46 00000000                 EXPORT           RVM_Fetch_And
   47 00000000         ;/* End Exports ****************************************
                       **********************/
   48 00000000         



ARM Macro Assembler    Page 2 


   49 00000000         ;/* Begin Function:RVM_Inv_Act *************************
                       ***********************
   50 00000000         ;Description : Activate an invocation. If the return val
                       ue is not desired, pass
   51 00000000         ;              0 into R2. This is a default implementati
                       on that saves all general
   52 00000000         ;              purpose registers and doesn't save FPU co
                       ntext. If you need a faster
   53 00000000         ;              version, consider inline functions; if yo
                       u need to save FPU contexts,
   54 00000000         ;              please DIY.
   55 00000000         ;Input       : R0 - rvm_cid_t Cap_Inv - The capability s
                       lot to the invocation stub. 2-Level.
   56 00000000         ;              R1 - rvm_ptr_t Param - The parameter for 
                       the call.
   57 00000000         ;Output      : R2 - rvm_ptr_t* Retval - The return value
                        from the call.
   58 00000000         ;Return      : R0 - rvm_ptr_t - The return value of the 
                       system call itself.
   59 00000000         ;*******************************************************
                       **********************/
   60 00000000         RVM_Inv_Act
   61 00000000 E92D 0FF0       PUSH             {R4-R11}    ; User-level is res
                                                            ponsible for all cl
                                                            obbering
   62 00000004         
   63 00000004 F44F 3480       MOV              R4,#0x10000 ; RVM_SVC_INV_ACT
   64 00000008 EA44 0400       ORR              R4,R0
   65 0000000C 460D            MOV              R5,R1       ; Parameter
   66 0000000E         
   67 0000000E DF00            SVC              #0x00       ; System call
   68 00000010 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
   69 00000014         
   70 00000014 4620            MOV              R0,R4       ; This is the retur
                                                            n value of the syst
                                                            em call itself
   71 00000016         
   72 00000016 2A00            CMP              R2,#0x00    ; See if this retur
                                                            n value is desired.
                                                            
   73 00000018 BF18            IT               NE
   74 0000001A 6015            STRNE            R5,[R2]     ; This is the retur
                                                            n value of the invo
                                                            cation
   75 0000001C         
   76 0000001C E8BD 0FF0       POP              {R4-R11}    ; Manual recovering
                                                            
   77 00000020 4770            BX               LR          ; Return from the c
                                                            all
   78 00000022         ;/* End Function:RVM_Inv_Act ***************************
                       **********************/
   79 00000022         
   80 00000022         ;/* Begin Function:RVM_Inv_Ret *************************
                       ***********************
   81 00000022         ;Description : Manually return from an invocation, and s
                       et the return value to
   82 00000022         ;              the old register set. This function does 



ARM Macro Assembler    Page 3 


                       not need a capability
   83 00000022         ;              table to work, and never returns.
   84 00000022         ;Input       : R0 - The returning result from the invoca
                       tion.
   85 00000022         ;Output      : None.
   86 00000022         ;Return      : None.
   87 00000022         ;*******************************************************
                       **********************/
   88 00000022         RVM_Inv_Ret
   89 00000022 F04F 0400       MOV              R4,#0x00    ; RVM_SVC_INV_RET
   90 00000026 4605            MOV              R5,R0       ; Set return value 
                                                            to the register
   91 00000028         
   92 00000028 DF00            SVC              #0x00       ; System call
   93 0000002A F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
   94 0000002E         
   95 0000002E 4620            MOV              R0,R4       ; If we reach here,
                                                             then return failed
                                                            
   96 00000030 4770            BX               LR
   97 00000032         ;/* End Function:RVM_Inv_Ret ***************************
                       **********************/
   98 00000032         
   99 00000032         ;/* Begin Function:RVM_Thd_Sched_Rcv *******************
                       ***********************
  100 00000032         ;Description : Try to receive a notification from the sc
                       heduler queue. This
  101 00000032         ;              can only be called from the same core the
                        thread is on.
  102 00000032         ;Input       : R0- rvm_cid_t Cap_Thd - The capability to
                        the scheduler thread. 
  103 00000032         ;                                      We are going to g
                       et timeout or fault
  104 00000032         ;                                      notifications for
                        the threads that it is 
  105 00000032         ;                                      responsible for s
                       cheduling. This capability
  106 00000032         ;                                      must point to a t
                       hread on the same core.
  107 00000032         ;                                      2-Level.
  108 00000032         ;Output      : R1 - rvm_ptr_t* Fault - The return value 
                       from the call.
  109 00000032         ;Return      : R0 - rvm_ret_t - If successful, the threa
                       d ID; or an error code.
  110 00000032         ;*******************************************************
                       **********************/
  111 00000032         RVM_Thd_Sched_Rcv
  112 00000032 B430            PUSH             {R4-R5}     ; Manual clobbering
                                                            
  113 00000034 F44F 14E8       MOV              R4,#0x1D0000 ; RVM_SVC_THD_SCHE
                                                            D_RCV
  114 00000038 4605            MOV              R5,R0       ; Parameter
  115 0000003A         
  116 0000003A DF00            SVC              #0x00       ; System call
  117 0000003C F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete



ARM Macro Assembler    Page 4 


  118 00000040         
  119 00000040 4620            MOV              R0,R4       ; This is the retur
                                                            n value of the syst
                                                            em call itself
  120 00000042         
  121 00000042 2900            CMP              R1,#0x00    ; See if this retur
                                                            n value is desired.
                                                            
  122 00000044 BF18            IT               NE
  123 00000046 600D            STRNE            R5,[R1]     ; This is the reaso
                                                            n of the fault
  124 00000048         
  125 00000048 BC30            POP              {R4-R5}     ; Manual recovering
                                                            
  126 0000004A 4770            BX               LR          ; Return from the c
                                                            all
  127 0000004C         ;/* End Function:RVM_Thd_Sched_Rcv *********************
                       **********************/
  128 0000004C         
  129 0000004C         ;/* Begin Function:RVM_Svc *****************************
                       ***********************
  130 0000004C         ;Description : Trigger a system call.
  131 0000004C         ;Input       : R0 - rvm_ptr_t Num - The system call numb
                       er/other information.
  132 0000004C         ;              R1 - rvm_ptr_t Param1 - Argument 1.
  133 0000004C         ;              R2 - rvm_ptr_t Param2 - Argument 2.
  134 0000004C         ;              R3 - rvm_ptr_t Param3 - Argument 3.
  135 0000004C         ;Output      : None.
  136 0000004C         ;Return      : None.
  137 0000004C         ;*******************************************************
                       **********************/
  138 0000004C         RVM_Svc
  139 0000004C B4F0            PUSH             {R4-R7}     ; Manual clobbering
                                                            
  140 0000004E 4604            MOV              R4,R0       ; Manually pass the
                                                             parameters accordi
                                                            ng to ARM calling c
                                                            onvention
  141 00000050 460D            MOV              R5,R1       ; Pass parameters
  142 00000052 4616            MOV              R6,R2
  143 00000054 461F            MOV              R7,R3
  144 00000056         
  145 00000056 DF00            SVC              #0x00       ; System call
  146 00000058 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  147 0000005C         
  148 0000005C 4620            MOV              R0,R4       ; This is the retur
                                                            n value
  149 0000005E BCF0            POP              {R4-R7}     ; Manual recovering
                                                            
  150 00000060 4770            BX               LR          ; Return from the c
                                                            all
  151 00000062         ;/* End Function:RVM_Svc *******************************
                       **********************/
  152 00000062         
  153 00000062         ;/* Begin Function:RVM_A7M_Svc_Kern ********************
                       ***********************
  154 00000062         ;Description : Trigger a system call. This is ARMv7-M sp



ARM Macro Assembler    Page 5 


                       ecific, and does not expand
  155 00000062         ;              to other architectures, and is only used 
                       for kernel functions.
  156 00000062         ;              This specially crafted system call allows
                        up to 8 parameters to
  157 00000062         ;              be passed and returned. This number may b
                       e different in your system.
  158 00000062         ;Input       : R0 - rvm_ptr_t Num - The system call numb
                       er/other information.
  159 00000062         ;              R1 - rvm_ptr_t ID - The func ID and sub I
                       D of the kernel function call.
  160 00000062         ;              R2 - rvm_ptr_t Args[6] - Array of 6 argum
                       ents.
  161 00000062         ;Output      : R2 - rvm_ptr_t Args[6] - Array of 6 retur
                       n values.
  162 00000062         ;Return      : R0 - rvm_ret_t - The system call return v
                       alue.
  163 00000062         ;*******************************************************
                       **********************/
  164 00000062         RVM_A7M_Svc_Kern
  165 00000062 E92D 1FF0       PUSH             {R4-R12}    ; Manual clobbering
                                                            
  166 00000066 4604            MOV              R4,R0       ; Manually pass the
                                                             parameters accordi
                                                            ng to ARM calling c
                                                            onvention
  167 00000068 460D            MOV              R5,R1
  168 0000006A 4694            MOV              R12,R2      ; Pass parameters
  169 0000006C F8DC 6000       LDR              R6,[R12,#0x00]
  170 00000070 F8DC 7004       LDR              R7,[R12,#0x04]
  171 00000074 F8DC 8008       LDR              R8,[R12,#0x08]
  172 00000078 F8DC 900C       LDR              R9,[R12,#0x0C]
  173 0000007C F8DC A010       LDR              R10,[R12,#0x10]
  174 00000080 F8DC B014       LDR              R11,[R12,#0x14]
  175 00000084         
  176 00000084 DF00            SVC              #0x00       ; System call
  177 00000086 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  178 0000008A         
  179 0000008A 4620            MOV              R0,R4       ; This is the retur
                                                            n value
  180 0000008C F8CC 6000       STR              R6,[R12,#0x00] ; These are extr
                                                            a return values
  181 00000090 F8CC 7004       STR              R7,[R12,#0x04]
  182 00000094 F8CC 8008       STR              R8,[R12,#0x08]
  183 00000098 F8CC 900C       STR              R9,[R12,#0x0C]
  184 0000009C F8CC A010       STR              R10,[R12,#0x10]
  185 000000A0 F8CC B014       STR              R11,[R12,#0x14]
  186 000000A4         
  187 000000A4 E8BD 1FF0       POP              {R4-R12}    ; Manual recovering
                                                            
  188 000000A8 4770            BX               LR          ; Return from the c
                                                            all
  189 000000AA         ;/* End Function:RVM_A7M_Svc_Kern **********************
                       **********************/
  190 000000AA         
  191 000000AA         ;/* Begin Function:_RVM_MSB_Get ************************
                       ***********************



ARM Macro Assembler    Page 6 


  192 000000AA         ;Description : Get the MSB of the word.
  193 000000AA         ;Input       : rvm_ptr_t Val - The value.
  194 000000AA         ;Output      : None.
  195 000000AA         ;Return      : rvm_ptr_t - The MSB position.   
  196 000000AA         ;*******************************************************
                       **********************/
  197 000000AA         _RVM_MSB_Get
  198 000000AA FAB0 F180       CLZ              R1,R0
  199 000000AE F04F 001F       MOV              R0,#31
  200 000000B2 EBA0 0001       SUB              R0,R1
  201 000000B6 4770            BX               LR
  202 000000B8         ;/* End Function:_RVM_MSB_Get **************************
                       **********************/
  203 000000B8         
  204 000000B8         ;/* Begin Function:RVM_Fetch_And ***********************
                       ***********************
  205 000000B8         ;Description : The fetch-and-logic-and atomic instructio
                       n. Logic AND the pointer
  206 000000B8         ;              value with the operand, and return the va
                       lue before logic AND.
  207 000000B8         ;Input       : rvm_ptr_t* Ptr - The pointer to the data.
                       
  208 000000B8         ;              rvm_ptr_t Operand - The number to logic A
                       ND with the destination.
  209 000000B8         ;Output      : rvm_ptr_t* Ptr - The pointer to the data.
                       
  210 000000B8         ;Return      : rvm_ptr_t - The value before the AND oper
                       ation.
  211 000000B8         ;*******************************************************
                       **********************/
  212 000000B8         RVM_Fetch_And
  213 000000B8 B410            PUSH             {R4}
  214 000000BA         RVM_Fetch_And_Fail
  215 000000BA E850 2F00       LDREX            R2,[R0]     ; Load exclusive
  216 000000BE EA02 0301       AND              R3,R2,R1    ; AND operation
  217 000000C2 E840 3400       STREX            R4,R3,[R0]  ; Store exclusive
  218 000000C6 2C00            CMP              R4,#0x00    ; See if we succeed
                                                            ed
  219 000000C8 D1F7            BNE              RVM_Fetch_And_Fail ; Go back if
                                                             we fail
  220 000000CA 4610            MOV              R0,R2
  221 000000CC BC10            POP              {R4}
  222 000000CE 4770            BX               LR
  223 000000D0         ;/* End Function:RVM_Fetch_And *************************
                       **********************/
  224 000000D0         
  225 000000D0                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\rvm_guest_a7m_asm.d -o.\objects\rvm_guest_a7m_asm.o -
I../Source -I../Include -I../Guest/M5P1_MuProkaron/MProkaron/Include -I. -I.\RT
E\_Virt1 -ID:\Program_Files_x86\Keil_v5\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers
\CMSIS\Device\ST\STM32F4xx\Include -ID:\Program_Files_x86\Keil_v5\ARM\CMSIS\Inc
lude --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528" -
-predefine="STM32F405xx SETA 1" --list=.\listings\rvm_guest_a7m_asm.lst ../Sour
ce/rvm_guest_a7m_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Int_Stack 00000400

Symbol: Int_Stack
   Definitions
      At line 16 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      None
Comment: Int_Stack unused
RVM_Int_Stack 00000400

Symbol: RVM_Int_Stack
   Definitions
      At line 15 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 32 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Int_Stack used once
RVM_User_Stack 00000000

Symbol: RVM_User_Stack
   Definitions
      At line 11 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 30 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_User_Stack used once
STACK 00000000

Symbol: STACK
   Definitions
      At line 10 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      None
Comment: STACK unused
User_Stack 00000000

Symbol: User_Stack
   Definitions
      At line 12 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      None
Comment: User_Stack unused
__initial_sp 00000400

Symbol: __initial_sp
   Definitions
      At line 13 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 28 in file ../Source/rvm_guest_a7m_asm.s
Comment: __initial_sp used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

RESET 00000000

Symbol: RESET
   Definitions
      At line 19 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      None
Comment: RESET unused
RVM_A7M_Svc_Kern 00000062

Symbol: RVM_A7M_Svc_Kern
   Definitions
      At line 164 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 42 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_A7M_Svc_Kern used once
RVM_Fetch_And 000000B8

Symbol: RVM_Fetch_And
   Definitions
      At line 212 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 46 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Fetch_And used once
RVM_Fetch_And_Fail 000000BA

Symbol: RVM_Fetch_And_Fail
   Definitions
      At line 214 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 219 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Fetch_And_Fail used once
RVM_Inv_Act 00000000

Symbol: RVM_Inv_Act
   Definitions
      At line 60 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 34 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Inv_Act used once
RVM_Inv_Ret 00000022

Symbol: RVM_Inv_Ret
   Definitions
      At line 88 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 36 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Inv_Ret used once
RVM_Svc 0000004C

Symbol: RVM_Svc
   Definitions
      At line 138 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 40 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Svc used once
RVM_Thd_Sched_Rcv 00000032

Symbol: RVM_Thd_Sched_Rcv



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 111 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 38 in file ../Source/rvm_guest_a7m_asm.s
Comment: RVM_Thd_Sched_Rcv used once
_RVM_MSB_Get 000000AA

Symbol: _RVM_MSB_Get
   Definitions
      At line 197 in file ../Source/rvm_guest_a7m_asm.s
   Uses
      At line 44 in file ../Source/rvm_guest_a7m_asm.s
Comment: _RVM_MSB_Get used once
9 symbols
349 symbols in table
