


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************
    2 00000000         ;Filename    : rvm_platform_a7m_asm.s
    3 00000000         ;Author      : pry
    4 00000000         ;Date        : 19/01/2017
    5 00000000         ;Description : The Cortex-M user-level assembly scheduli
                       ng support of the RVM hypervisor.
    6 00000000         ;*******************************************************
                       **********************/
    7 00000000         
    8 00000000         ;/* Begin Header ***************************************
                       **********************/
    9 00000000         ;2^3=8 Byte alignment
   10 00000000                 AREA             STACK, NOINIT, READWRITE, ALIGN
=3
   11 00000000                 SPACE            0x00000100
   12 00000100         __initial_sp
   13 00000100         
   14 00000100                 AREA             ARCH,CODE,READONLY,ALIGN=3
   15 00000000                 THUMB
   16 00000000                 REQUIRE8
   17 00000000                 PRESERVE8
   18 00000000         ;/* End Header *****************************************
                       **********************/
   19 00000000         
   20 00000000         ;/* Begin Exports **************************************
                       **********************/
   21 00000000         ;Required by keil
   22 00000000                 EXPORT           __initial_sp
   23 00000000         ;User entry stub
   24 00000000                 EXPORT           _RVM_Entry
   25 00000000         ;User level stub for thread creation and synchronous inv
                       ocation
   26 00000000                 EXPORT           _RVM_Jmp_Stub
   27 00000000         ;Triggering an invocation
   28 00000000                 EXPORT           RVM_Inv_Act
   29 00000000         ;Returning from an invocation
   30 00000000                 EXPORT           RVM_Inv_Ret
   31 00000000         ;Receive thread scheduler notification
   32 00000000                 EXPORT           RVM_Thd_Sched_Rcv
   33 00000000         ;System call gate
   34 00000000                 EXPORT           RVM_Svc
   35 00000000         ;Kernel function system call gate
   36 00000000                 EXPORT           RVM_A7M_Svc_Kern
   37 00000000         ;Get the MSB in a word
   38 00000000                 EXPORT           _RVM_MSB_Get
   39 00000000         ;Shut the semihosting up
   40 00000000                 EXPORT           __user_setup_stackheap
   41 00000000         ;/* End Exports ****************************************
                       **********************/
   42 00000000         
   43 00000000         ;/* Begin Imports **************************************
                       **********************/
   44 00000000         ;The ARM C library entrance. This will do all the dirty 
                       init jobs for us.
   45 00000000                 IMPORT           __main
   46 00000000         ;/* End Imports ****************************************
                       **********************/
   47 00000000         



ARM Macro Assembler    Page 2 


   48 00000000         ;/* Begin Function:_RVM_Entry **************************
                       ***********************
   49 00000000         ;Description : The entry of the process.
   50 00000000         ;Input       : None.
   51 00000000         ;Output      : None.
   52 00000000         ;Return      : None.
   53 00000000         ;*******************************************************
                       **********************/
   54 00000000         _RVM_Entry
   55 00000000 4831            LDR              R0, =__main
   56 00000002 4700            BX               R0
   57 00000004         ;/* End Function:_RVM_Entry ****************************
                       **********************/
   58 00000004         
   59 00000004         ;/* Begin Function:_RVM_Jmp_Stub ***********************
                       ***********************
   60 00000004         ;Description : The user level stub for thread/invocation
                        creation.
   61 00000004         ;Input       : R4 - rvm_ptr_t Entry - The entry address.
                       
   62 00000004         ;              R5 - rvm_ptr_t Param - The parameter to b
                       e passed to it.
   63 00000004         ;Output      : None.
   64 00000004         ;Return      : None.
   65 00000004         ;*******************************************************
                       **********************/
   66 00000004         _RVM_Jmp_Stub
   67 00000004 B090            SUB              SP,#0x40    ; In order not to d
                                                            estroy the stack
   68 00000006 4628            MOV              R0,R5
   69 00000008 47A0            BLX              R4          ; Branch to the act
                                                            ual entry address.
   70 0000000A         ;/* End Function:_RVM_Jmp_Stub *************************
                       **********************/
   71 0000000A         
   72 0000000A         ;/* Begin Function:RVM_Inv_Act *************************
                       ***********************
   73 0000000A         ;Description : Activate an invocation. If the return val
                       ue is not desired, pass
   74 0000000A         ;              0 into R2. This is a default implementati
                       on that saves all general
   75 0000000A         ;              purpose registers and doesn't save FPU co
                       ntext. If you need a faster
   76 0000000A         ;              version, consider inline functions; if yo
                       u need to save FPU contexts,
   77 0000000A         ;              please DIY.
   78 0000000A         ;Input       : R0 - rvm_cid_t Cap_Inv - The capability s
                       lot to the invocation stub. 2-Level.
   79 0000000A         ;              R1 - rvm_ptr_t Param - The parameter for 
                       the call.
   80 0000000A         ;Output      : R2 - rvm_ptr_t* Retval - The return value
                        from the call.
   81 0000000A         ;Return      : R0 - rvm_ptr_t - The return value of the 
                       system call itself.
   82 0000000A         ;*******************************************************
                       **********************/
   83 0000000A         RVM_Inv_Act
   84 0000000A E92D 0FF0       PUSH             {R4-R11}    ; User-level is res
                                                            ponsible for all cl



ARM Macro Assembler    Page 3 


                                                            obbering
   85 0000000E         
   86 0000000E F44F 3480       MOV              R4,#0x10000 ; RVM_SVC_INV_ACT
   87 00000012 EA44 0400       ORR              R4,R0
   88 00000016 460D            MOV              R5,R1       ; Parameter
   89 00000018         
   90 00000018 DF00            SVC              #0x00       ; System call
   91 0000001A F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
   92 0000001E         
   93 0000001E 4620            MOV              R0,R4       ; This is the retur
                                                            n value of the syst
                                                            em call itself
   94 00000020         
   95 00000020 2A00            CMP              R2,#0x00    ; See if this retur
                                                            n value is desired.
                                                            
   96 00000022 BF18            IT               NE
   97 00000024 6015            STRNE            R5,[R2]     ; This is the retur
                                                            n value of the invo
                                                            cation
   98 00000026         
   99 00000026 E8BD 0FF0       POP              {R4-R11}    ; Manual recovering
                                                            
  100 0000002A 4770            BX               LR          ; Return from the c
                                                            all
  101 0000002C         ;/* End Function:RVM_Inv_Act ***************************
                       **********************/
  102 0000002C         
  103 0000002C         ;/* Begin Function:RVM_Inv_Ret *************************
                       ***********************
  104 0000002C         ;Description : Manually return from an invocation, and s
                       et the return value to
  105 0000002C         ;              the old register set. This function does 
                       not need a capability
  106 0000002C         ;              table to work, and never returns.
  107 0000002C         ;Input       : R0 - The returning result from the invoca
                       tion.
  108 0000002C         ;Output      : None.
  109 0000002C         ;Return      : None.
  110 0000002C         ;*******************************************************
                       **********************/
  111 0000002C         RVM_Inv_Ret
  112 0000002C F04F 0400       MOV              R4,#0x00    ; RVM_SVC_INV_RET
  113 00000030 4605            MOV              R5,R0       ; Set return value 
                                                            to the register
  114 00000032         
  115 00000032 DF00            SVC              #0x00       ; System call
  116 00000034 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  117 00000038         
  118 00000038 4620            MOV              R0,R4       ; If we reach here,
                                                             then return failed
                                                            
  119 0000003A 4770            BX               LR
  120 0000003C         ;/* End Function:RVM_Inv_Ret ***************************
                       **********************/



ARM Macro Assembler    Page 4 


  121 0000003C         
  122 0000003C         ;/* Begin Function:RVM_Thd_Sched_Rcv *******************
                       ***********************
  123 0000003C         ;Description : Try to receive a notification from the sc
                       heduler queue. This
  124 0000003C         ;              can only be called from the same core the
                        thread is on.
  125 0000003C         ;Input       : R0- rvm_cid_t Cap_Thd - The capability to
                        the scheduler thread. 
  126 0000003C         ;                                      We are going to g
                       et timeout or fault
  127 0000003C         ;                                      notifications for
                        the threads that it is 
  128 0000003C         ;                                      responsible for s
                       cheduling. This capability
  129 0000003C         ;                                      must point to a t
                       hread on the same core.
  130 0000003C         ;                                      2-Level.
  131 0000003C         ;Output      : R1 - rvm_ptr_t* Fault - The return value 
                       from the call.
  132 0000003C         ;Return      : R0 - rvm_ret_t - If successful, the threa
                       d ID; or an error code.
  133 0000003C         ;*******************************************************
                       **********************/
  134 0000003C         RVM_Thd_Sched_Rcv
  135 0000003C B430            PUSH             {R4-R5}     ; Manual clobbering
                                                            
  136 0000003E F44F 14E8       MOV              R4,#0x1D0000 ; RVM_SVC_THD_SCHE
                                                            D_RCV
  137 00000042 4605            MOV              R5,R0       ; Parameter
  138 00000044         
  139 00000044 DF00            SVC              #0x00       ; System call
  140 00000046 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  141 0000004A         
  142 0000004A 4620            MOV              R0,R4       ; This is the retur
                                                            n value of the syst
                                                            em call itself
  143 0000004C         
  144 0000004C 2900            CMP              R1,#0x00    ; See if this retur
                                                            n value is desired.
                                                            
  145 0000004E BF18            IT               NE
  146 00000050 600D            STRNE            R5,[R1]     ; This is the reaso
                                                            n of the fault
  147 00000052         
  148 00000052 BC30            POP              {R4-R5}     ; Manual recovering
                                                            
  149 00000054 4770            BX               LR          ; Return from the c
                                                            all
  150 00000056         ;/* End Function:RVM_Thd_Sched_Rcv *********************
                       **********************/
  151 00000056         
  152 00000056         ;/* Begin Function:RVM_Svc *****************************
                       ***********************
  153 00000056         ;Description : Trigger a system call.
  154 00000056         ;Input       : R0 - rvm_ptr_t Num - The system call numb
                       er/other information.



ARM Macro Assembler    Page 5 


  155 00000056         ;              R1 - rvm_ptr_t Param1 - Argument 1.
  156 00000056         ;              R2 - rvm_ptr_t Param2 - Argument 2.
  157 00000056         ;              R3 - rvm_ptr_t Param3 - Argument 3.
  158 00000056         ;Output      : None.
  159 00000056         ;Return      : R0 - rvm_ret_t - The system call return v
                       alue.
  160 00000056         ;*******************************************************
                       **********************/
  161 00000056         RVM_Svc
  162 00000056 B4F0            PUSH             {R4-R7}     ; Manual clobbering
                                                            
  163 00000058 4604            MOV              R4,R0       ; Manually pass the
                                                             parameters accordi
                                                            ng to ARM calling c
                                                            onvention
  164 0000005A 460D            MOV              R5,R1       ; Pass parameters
  165 0000005C 4616            MOV              R6,R2
  166 0000005E 461F            MOV              R7,R3
  167 00000060         
  168 00000060 DF00            SVC              #0x00       ; System call
  169 00000062 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  170 00000066         
  171 00000066 4620            MOV              R0,R4       ; This is the retur
                                                            n value
  172 00000068 BCF0            POP              {R4-R7}     ; Manual recovering
                                                            
  173 0000006A 4770            BX               LR          ; Return from the c
                                                            all
  174 0000006C         ;/* End Function:RVM_Svc *******************************
                       **********************/
  175 0000006C         
  176 0000006C         ;/* Begin Function:RVM_A7M_Svc_Kern ********************
                       ***********************
  177 0000006C         ;Description : Trigger a system call. This is ARMv7-M sp
                       ecific, and does not expand
  178 0000006C         ;              to other architectures, and is only used 
                       for kernel functions.
  179 0000006C         ;              This specially crafted system call allows
                        up to 8 parameters to
  180 0000006C         ;              be passed and returned.
  181 0000006C         ;Input       : R0 - rvm_ptr_t Num - The system call numb
                       er/other information.
  182 0000006C         ;              R1 - rvm_ptr_t ID - The func ID and sub I
                       D of the kernel function call.
  183 0000006C         ;              R2 - rvm_ptr_t Args[6] - Array of 6 argum
                       ents.
  184 0000006C         ;Output      : R2 - rvm_ptr_t Args[6] - Array of 6 retur
                       n values.
  185 0000006C         ;Return      : R0 - rvm_ret_t - The system call return v
                       alue.
  186 0000006C         ;*******************************************************
                       **********************/
  187 0000006C         RVM_A7M_Svc_Kern
  188 0000006C E92D 1FF0       PUSH             {R4-R12}    ; Manual clobbering
                                                            
  189 00000070 4604            MOV              R4,R0       ; Manually pass the
                                                             parameters accordi



ARM Macro Assembler    Page 6 


                                                            ng to ARM calling c
                                                            onvention
  190 00000072 460D            MOV              R5,R1
  191 00000074 4694            MOV              R12,R2      ; Pass parameters
  192 00000076 F8DC 6000       LDR              R6,[R12,#0x00]
  193 0000007A F8DC 7004       LDR              R7,[R12,#0x04]
  194 0000007E F8DC 8008       LDR              R8,[R12,#0x08]
  195 00000082 F8DC 900C       LDR              R9,[R12,#0x0C]
  196 00000086 F8DC A010       LDR              R10,[R12,#0x10]
  197 0000008A F8DC B014       LDR              R11,[R12,#0x14]
  198 0000008E         
  199 0000008E DF00            SVC              #0x00       ; System call
  200 00000090 F3BF 8F6F       ISB                          ; Instruction barri
                                                            er - wait for instr
                                                            uction to complete
  201 00000094         
  202 00000094 4620            MOV              R0,R4       ; This is the retur
                                                            n value
  203 00000096 F8CC 6000       STR              R6,[R12,#0x00] ; These are extr
                                                            a return values - R
                                                            5 is not used here.
                                                            
  204 0000009A F8CC 7004       STR              R7,[R12,#0x04]
  205 0000009E F8CC 8008       STR              R8,[R12,#0x08]
  206 000000A2 F8CC 900C       STR              R9,[R12,#0x0C]
  207 000000A6 F8CC A010       STR              R10,[R12,#0x10]
  208 000000AA F8CC B014       STR              R11,[R12,#0x14]
  209 000000AE         
  210 000000AE E8BD 1FF0       POP              {R4-R12}    ; Manual recovering
                                                            
  211 000000B2 4770            BX               LR          ; Return from the c
                                                            all
  212 000000B4         ;/* End Function:RVM_A7M_Svc_Kern **********************
                       **********************/
  213 000000B4         
  214 000000B4         ;/* Begin Function:_RVM_MSB_Get ************************
                       ***********************
  215 000000B4         ;Description : Get the MSB of the word.
  216 000000B4         ;Input       : R0 - rvm_ptr_t Val - The value.
  217 000000B4         ;Output      : None.
  218 000000B4         ;Return      : R0 - rvm_ptr_t - The MSB position.
  219 000000B4         ;*******************************************************
                       **********************/
  220 000000B4         _RVM_MSB_Get
  221 000000B4 FAB0 F180       CLZ              R1,R0
  222 000000B8 F04F 001F       MOV              R0,#31
  223 000000BC EBA0 0001       SUB              R0,R1
  224 000000C0 4770            BX               LR
  225 000000C2         ;/* End Function:_RVM_MSB_Get **************************
                       **********************/
  226 000000C2         
  227 000000C2         ;/* Begin Function:__user_setup_stackheap **************
                       ***********************
  228 000000C2         ;Description : We place the function here to shut the SE
                       MIHOSTING up.
  229 000000C2         ;Input       : None.
  230 000000C2         ;Output      : None.
  231 000000C2         ;Return      : None.
  232 000000C2         ;*******************************************************



ARM Macro Assembler    Page 7 


                       **********************/
  233 000000C2         __user_setup_stackheap
  234 000000C2 4608            MOV              R0,R1       ; Stack as where we
                                                             came in, and defin
                                                            itely no heap
  235 000000C4 460A            MOV              R2,R1
  236 000000C6 4770            BX               LR
  237 000000C8         ;/* End Function:__user_setup_stackheap ****************
                       **********************/
  238 000000C8         
  239 000000C8                 ALIGN
  240 000000C8                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\rvm_platform_a7m_asm.d -o.\objects\rvm_platform_a7m_a
sm.o -I./Source -I./Include -I../MAmmonite/Include -I. -I.\RTE\_RVM -ID:\Progra
m_Files_x86\Keil_v5\Packs\Keil\STM32F4xx_DFP\2.14.0\Drivers\CMSIS\Device\ST\STM
32F4xx\Include -ID:\Program_Files_x86\Keil_v5\ARM\CMSIS\Include --predefine="__
MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 528" --predefine="STM32F40
5xx SETA 1" --list=.\listings\rvm_platform_a7m_asm.lst ../MAmmonite/Platform/A7
M/rvm_platform_a7m_asm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

STACK 00000000

Symbol: STACK
   Definitions
      At line 10 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      None
Comment: STACK unused
__initial_sp 00000100

Symbol: __initial_sp
   Definitions
      At line 12 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 22 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: __initial_sp used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARCH 00000000

Symbol: ARCH
   Definitions
      At line 14 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      None
Comment: ARCH unused
RVM_A7M_Svc_Kern 0000006C

Symbol: RVM_A7M_Svc_Kern
   Definitions
      At line 187 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 36 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: RVM_A7M_Svc_Kern used once
RVM_Inv_Act 0000000A

Symbol: RVM_Inv_Act
   Definitions
      At line 83 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 28 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: RVM_Inv_Act used once
RVM_Inv_Ret 0000002C

Symbol: RVM_Inv_Ret
   Definitions
      At line 111 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 30 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: RVM_Inv_Ret used once
RVM_Svc 00000056

Symbol: RVM_Svc
   Definitions
      At line 161 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 34 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: RVM_Svc used once
RVM_Thd_Sched_Rcv 0000003C

Symbol: RVM_Thd_Sched_Rcv
   Definitions
      At line 134 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 32 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: RVM_Thd_Sched_Rcv used once
_RVM_Entry 00000000

Symbol: _RVM_Entry
   Definitions
      At line 54 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 24 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: _RVM_Entry used once
_RVM_Jmp_Stub 00000004

Symbol: _RVM_Jmp_Stub



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 66 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 26 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: _RVM_Jmp_Stub used once
_RVM_MSB_Get 000000B4

Symbol: _RVM_MSB_Get
   Definitions
      At line 220 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 38 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: _RVM_MSB_Get used once
__user_setup_stackheap 000000C2

Symbol: __user_setup_stackheap
   Definitions
      At line 233 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 40 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: __user_setup_stackheap used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

__main 00000000

Symbol: __main
   Definitions
      At line 45 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
   Uses
      At line 55 in file ../MAmmonite/Platform/A7M/rvm_platform_a7m_asm.s
Comment: __main used once
1 symbol
349 symbols in table
